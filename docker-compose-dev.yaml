# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
# WARNING: This configuration is for local development. Do not use it in a production deployment.
---
x-airflow-common:
  &airflow-common
  build: 
    context: .
    dockerfile: Dockerfile-airflow-domino.dev
  environment:
    &airflow-common-env
    AIRFLOW__API__BASE_URL: "http://${HOSTNAME:-localhost}:${AIRFLOW_APISERVER_PORT_HOST:-8080}${AIRFLOW_APISERVER_BASENAME:-}"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://${HOSTNAME:-localhost}:${AIRFLOW_APISERVER_PORT_HOST:-8080}${AIRFLOW_APISERVER_BASENAME:-}/execution/'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    DOMINO_DEPLOY_MODE: ${DOMINO_DEPLOY_MODE}
    DOMINO_DOCKER_PROXY: tcp://${HOSTNAME:-localhost}:${DOCKER_PROXY_PORT_HOST:-2375}
    LOCAL_DOMINO_SHARED_DATA_PATH: ${LOCAL_DOMINO_SHARED_DATA_PATH}
  volumes: &airflow-common-volumes
    - ${AIRFLOW_PROJ_DIR:-./airflow}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-./airflow}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-./airflow}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-./airflow}/plugins:/opt/airflow/plugins
    - ./passwords.json:/opt/airflow/simple_auth_manager_passwords.json.generated
    - ${LOCAL_DOMINO_SHARED_DATA_PATH}:/home/shared_storage
    - ./src/domino:/opt/airflow/domino/domino_py/src/domino # Hot reload domino package - remove in production
  user: "${AIRFLOW_UID:-1000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    container_name: airflow-redis
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - ${REDIS_PORT_HOST:-6379}:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-apiserver:
    <<: *airflow-common
    container_name: airflow-apiserver
    environment:
      AIRFLOW__API__BASE_URL: "https://${HOSTNAME:-localhost}:${AIRFLOW_APISERVER_PORT_HOST}${AIRFLOW_APISERVER_BASENAME}"
    command: api-server
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - ${AIRFLOW_APISERVER_PORT_HOST:-8080}:8080
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-common
    container_name: airflow-dag-processor
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-domino-worker:
    <<: *airflow-common
    container_name: airflow-domino-worker
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_ADMIN_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    container_name: airflow-flower
    command: celery flower --url-prefix=${FLOWER_URL_PREFIX:-} --basic-auth=${FLOWER_BASIC_AUTH:-}
    healthcheck:
      test: ["CMD", "curl", "--fail", "-u", "${FLOWER_USER_AUTH}", "http://${HOSTNAME:-localhost}:${FLOWER_PORT_HOST:-5555}${FLOWER_URL_PREFIX:-/}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles:
      - flower
    ports:
      - ${FLOWER_PORT_HOST:-5555}:5555
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Domino REST Api
  domino-rest:
    # image: ghcr.io/iisas/domino-rest:latest
    build:
      context: ./rest
      dockerfile: Dockerfile
    container_name: domino-rest
    command: bash -c "alembic upgrade heads && uvicorn main:app --reload --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - ${DOMINO_REST_PORT_HOST:-8000}:8000
    environment:
      - DOMINO_DB_USER=postgres
      - DOMINO_DB_PASSWORD=postgres
      - DOMINO_DB_HOST=domino-postgres
      - DOMINO_DB_PORT=5432
      - DOMINO_DB_NAME=postgres
      - DOMINO_DEFAULT_PIECES_REPOSITORY_VERSION=0.6.0
      - DOMINO_DEFAULT_PIECES_REPOSITORY_TOKEN=${DOMINO_DEFAULT_PIECES_REPOSITORY_TOKEN}
      - DOMINO_GITHUB_ACCESS_TOKEN_WORKFLOWS=${DOMINO_GITHUB_ACCESS_TOKEN_WORKFLOWS}
      - DOMINO_GITHUB_WORKFLOWS_REPOSITORY=${DOMINO_GITHUB_WORKFLOWS_REPOSITORY}
      - CREATE_DEFAULT_USER=true
      - DOMINO_DEPLOY_MODE=local-compose
      - AIRFLOW_ADMIN_USERNAME=${AIRFLOW_ADMIN_USERNAME:-admin}
      - AIRFLOW_ADMIN_PASSWORD=${AIRFLOW_ADMIN_PASSWORD:-airflow}
      - AIRFLOW_APISERVER_HOST=http://airflow-apiserver:8080${AIRFLOW_APISERVER_BASENAME:-}
      - ROOT_PATH=${DOMINO_REST_BASENAME:-}
    networks:
      - domino-postgres-network
      - default
    volumes:
      - ./rest/:/rest # Enable hot reload for backend
      - ${AIRFLOW_PROJ_DIR:-./airflow}/dags:/opt/airflow/dags
    depends_on:
      domino-postgres:
        condition: service_healthy
      airflow-apiserver:
        condition: service_healthy

  # Domino Postgres
  domino-postgres:
    image: postgres:13
    container_name: domino-postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - domino-postgres-volume:/var/lib/postgresql/data
    networks:
      - domino-postgres-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 2s
    ports:
      - ${DOMINO_POSTGRES_PORT_HOST:-5433}:5432
    restart: always

  # Domino Frontend
  domino-frontend:
    #image: ghcr.io/iisas/domino-frontend:compose
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: domino-frontend
    command: pnpm debug
    environment:
      - DOMINO_DEPLOY_MODE=local-compose
      - API_URL=http://${HOSTNAME:-localhost}:${DOMINO_REST_PORT_HOST:-8000}${DOMINO_REST_BASENAME:-}
      - BASENAME=${DOMINO_FRONTEND_BASENAME:-}
    ports:
      - ${DOMINO_FRONTEND_PORT_HOST:-3000}:3000
      - ${DOMINO_FRONTEND_DEBUG_PORT_HOST:-9222}:9222  # Expose debug port
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      domino-rest:
        condition: service_started

  # Domino Docker Proxy
  docker-proxy:
    image: alpine/socat
    container_name: domino-docker-proxy
    command: "TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock"
    ports:
      - ${DOCKER_PROXY_PORT_HOST:-2376}:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  postgres-db-volume: null
  domino-postgres-volume: null

networks:
  domino-postgres-network:
    driver: bridge
  domino-services-network:
    driver: bridge
