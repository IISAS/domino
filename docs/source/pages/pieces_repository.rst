.. _domino-pieces-repo-page:

Pieces repository
================================

.. tip:: The easiest way to start your Pieces repository is to use our `Template for Pieces repository <https://github.com/Tauffer-Consulting/domino_pieces_repository_template>`_

A Pieces repository is a Git repository that contains multiple Pieces available to be used in Domino Workflows.
A Domino Pieces repository should contain:

- a :code:`dependencies` folder with all :code:`Dockerfile` and :code:`requirements.txt` files defined as Pieces dependencies
- a :code:`pieces` folder with all Pieces folders
- a :code:`config.toml` configuration file

.. code-block::
   :caption: Repository folders and files structure

    dependencies/
    ├── Dockerfile_1
    ├── requirements_1.txt
    └── requirements_2.txt
    pieces/
    └── FirstPiece/
        ├── metadata.json
        ├── models.py
        └── piece.py
    └── SecondPiece/
        ├── metadata.json
        ├── models.py
        └── piece.py
    config.toml


Piece Folder
-----------------------

The :code:`pieces` folder should contain your Pieces. Each Piece folder name should have the sufix :code:`Piece` and follow a standard organization and contain certain information to be able to be found and used by your deployed Domino instance. Example: 

.. code-block::
   :caption: Piece folder example

    pieces/
    └── FirstPiece/
        ├── metadata.json
        ├── models.py
        └── piece.py


Secrets
~~~~~~~~~~~~~~~~~~~~~
Some Pieces may require secrets to be able to run. These secrets should be defined in the :code:`models.py` file as referenced in **Models** section.
The secrets should have unique names for the :code:`piece-repository` level, so you should not define the same secret name in different **Pieces** of the same **piece-repository**.   
Example:  

.. code-block:: python
   :caption: FirstPiece/models.py

    class SecretsModel(BaseModel):
        """
        FirstPiece Secrets
        """

        EXAMPLE_VAR_1: str = Field(
            description="Example secret var"
        )


.. code-block:: python
   :caption: SecondPiece/models.py

    class SecretsModel(BaseModel):
        """
        SecondPiece Secrets
        """

        EXAMPLE_VAR_2: str = Field(
            description="Example secret var 2"
        )


.. warning:: Repeated Secrets arguments names are not allowed within the same repository. If the same name is used for more than one Secret argument in the same repository, this will cause overwriting of the secret value in Domino.


Dependencies
------------------------

The :code:`/dependencies` folder should contain all the :code:`requirements.txt` and :code:`Dockerfile` files that were defined as dependencies to your custom Pieces. Example:

.. code-block::
   :caption: Dependencies folder example

    dependencies/
    ├── Dockerfile_1
    ├── requirements_1.txt
    └── requirements_2.txt

Config file
------------------------------

The :code:`config.toml` file stores the configuration variables for the project.

.. code-block:: toml
   :caption: Repository's configuration file

    [repository]
    REPOSITORY_NAME = "example_pieces"
    VERSION = "0.1.0"
    REGISTRY_NAME = "example_github_registry"


Files generated by :code:`domino organize`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When using Domino convenience CLI functions to prepare your code repository to run, some files will be automatically created or modified for you inside the :code:`/.domino` folder:

- A :code:`dependencies_map.json` file will be created at 
- A :code:`compiled_metadata.json` file will be created at :code:`/.domino/`

.. tip:: Using our `Template for Pieces repository <https://github.com/Tauffer-Consulting/domino_pieces_repository_template>`_ will automatically run :code:`domino organize` (with Github actions) for every commit to :code:`main` branch. See more below.


Github actions
----------------------

Our `Template for Pieces repository <https://github.com/Tauffer-Consulting/domino_pieces_repository_template>`_ provides out-of-the box Github actions to validate, organize and publish your Pieces images.

Go to :code:`Settings -> Action -> General -> Workflow permissions` and choose :code:`read and write permissions` to allow the Github actions to push to your repository.



.. raw:: html

    <div id="carouselExampleControls" class="carousel slide" data-interval="false">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img class="d-block w-100" src="_static/media/pieces_repository_slide_1.png" alt="First slide">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" src="_static/media/pieces_repository_slide_2.png" alt="Second slide">
            </div>
        </div>
        <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>