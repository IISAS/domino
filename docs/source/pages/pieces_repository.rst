.. _domino-pieces-repo-page:

Pieces repository
================================

.. tip:: The easiest way to start your Pieces repository is to use our `Template for Pieces repository <https://github.com/Tauffer-Consulting/domino_pieces_repository_template>`_

A Pieces repository is a Git repository that contains multiple Pieces available to be used in Domino Workflows.
A Domino Pieces repository should contain:

- a :code:`pieces/` folder containing all :ref:`Pieces<domino-pieces-repository-piecefolder>` folders
- a :ref:`dependencies/<domino-pieces-repository-dependencies>` folder with all :code:`Dockerfile` and :code:`requirements.txt` files defined as Pieces dependencies
- a :ref:`config.toml<domino-pieces-repository-config>` configuration file
- a :code:`.domino/` folder containing the :code:`dependencies_map.json` and :code:`compiled_metadata.json` files, which are automatically generated by the :ref:`Github actions<domino-pieces-repository-actions>`.

.. code-block::
   :caption: Repository folders and files structure

    dependencies/
    ├── Dockerfile_1
    ├── requirements_1.txt
    └── requirements_2.txt
    pieces/
    └── FirstPiece/
        ├── metadata.json
        ├── models.py
        └── piece.py
    └── SecondPiece/
        ├── metadata.json
        ├── models.py
        └── piece.py
    config.toml


.. _domino-pieces-repository-piecefolder:

Piece Folder
-----------------------

The :code:`pieces/` folder should contain all the Pieces in the repository. Each Piece folder name should have the sufix :code:`Piece` and follow a standard organization and contain certain information to be able to be found and used by your deployed Domino instance. Example: 

.. code-block::
   :caption: Piece folder example

    pieces/
    └── FirstPiece/
        ├── metadata.json
        ├── models.py
        └── piece.py

For detailed information on how to create a Piece, see :ref:`Pieces<domino-pieces-page>`.


.. _domino-pieces-repository-dependencies:

Dependencies
------------------------

The :code:`/dependencies` folder should contain all the :code:`requirements.txt` and :code:`Dockerfile` files that were defined as dependencies in the :code:`metadata.json` files of the Pieces in this repository. Example:

.. code-block::
   :caption: Dependencies folder example

    dependencies/
    ├── Dockerfile_1
    ├── requirements_1.txt
    └── requirements_2.txt


.. _domino-pieces-repository-config:

config.toml
------------------------------

The :code:`config.toml` file stores the configuration variables for the repository. Example:

.. code-block:: toml
   :caption: Repository's configuration file

    [repository]
    # The name of the github owner, must be in lower-case letters
    REGISTRY_NAME = "github_owner_name"

    # The name of this Pieces repository
    REPOSITORY_NAME = "example_pieces"

    # The label of this Pieces repository, as it will appear in Domino GUI
    REPOSITORY_LABEL = "OpenAI Domino Pieces"
    
    # The version of this Pieces release
    VERSION = "0.1.0"
    

.. _domino-pieces-repository-actions:

Github actions
----------------------

Our `Template for Pieces repository <https://github.com/Tauffer-Consulting/domino_pieces_repository_template>`_ provides out-of-the box Github actions to validate, organize and publish your Pieces images.
Whenever the :code:`config.toml` file of a pieces repository is updated, the actions will run and some files will be automatically created or modified inside the repository's :code:`/.domino` folder:

- A :code:`dependencies_map.json` file
- A :code:`compiled_metadata.json` file

Besides that, the actions will also create the following artifacts within the repository:

- A :code:`VERSION.tar.gz` file will be created as a release asset
- Docker images will be built and published to the repository's container registry (in Github this is named Packages). One image will be created for each dependency group, as defined in :code:`.domino/dependencies_map.json` file.

.. warning:: For the actions to run successfully, make sure that under your repository :code:`Settings -> Action -> General -> Workflow permissions` the option :code:`Read and write permissions` is selected.

.. image:: /_static/media/pieces_repository_slide_2.png
   :width: 100%
   :align: center
   :alt: Pieces repository actions
